nsole_stdout_stderr" id="console_new_console_stdout_stderr">#</a></span></h3>
<p>Creates a new <code>Console</code> by passing one or two writable stream instances.
<code>stdout</code> is a writable stream to print log or info output. <code>stderr</code>
is used for warning or error output. If <code>stderr</code> isn&#39;t passed, warning and error
output will be sent to <code>stdout</code>.

</p>
<pre><code class="js">const output = fs.createWriteStream(&#39;./stdout.log&#39;);
const errorOutput = fs.createWriteStream(&#39;./stderr.log&#39;);
// custom simple logger
const logger = new Console(output, errorOutput);
// use it like console
var count = 5;
logger.log(&#39;count: %d&#39;, count);
// in stdout.log: count 5</code></pre>
<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to
<a href="process.html#process_process_stdout"><code>process.stdout</code></a> and <a href="process.html#process_process_stderr"><code>process.stderr</code></a>. It is equivalent to calling:

</p>
<pre><code class="js">new Console(process.stdout, process.stderr);</code></pre>
<h3>console.assert(value[, message][, ...])<span><a class="mark" href="#console_console_assert_value_message" id="console_console_assert_value_message">#</a></span></h3>
<p>A simple assertion test that verifies whether <code>value</code> is truthy. If it is not,
an <code>AssertionError</code> is thrown. If provided, the error <code>message</code> is formatted
using <a href="util.html#util_util_format_format"><code>util.format()</code></a> and used as the error message.

</p>
<pre><code class="js">console.assert(true, &#39;does nothing&#39;);
  // OK
console.assert(false, &#39;Whoops %s&#39;, &#39;didn\&#39;t work&#39;);
  // AssertionError: Whoops didn&#39;t work</code></pre>
<p><em>Note: the <code>console.assert()</code> method is implemented differently in Node.js
than the <code>console.assert()</code> method <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/assert">available in browsers</a>.</em>

</p>
<p>Specifically, in browsers, calling <code>console.assert()</code> with a falsy
assertion will cause the <code>message</code> to be printed to the console without
interrupting execution of subsequent code. In Node.js, however, a falsy
assertion will cause an <code>AssertionError</code> to be thrown.

</p>
<p>Functionality approximating that implemented by browsers can be implemented
by extending Node.js&#39; <code>console</code> and overriding the <code>console.assert()</code> method.

</p>
<p>In the following example, a simple module is created that extends and overrides
the default behavior of <code>console</code> in Node.js.

</p>
<pre><code class="js">&#39;use strict&#39;;

// Creates a simple extension of console with a
// new impl for assert without monkey-patching.
const myConsole = Object.setPrototypeOf({
  assert(assertion, message, ...args) {
    try {
      console.assert(assertion, message, ...args);
    } catch (err) {
      console.error(err.stack);
    }
  }
}, console);

module.exports = myConsole;</code></pre>
<p>This can then be used as a direct replacement for the built in console:

</p>
<pre><code class="js">const console = require(&#39;./myConsole&#39;);
console.assert(false, &#39;this message will print, but no error thrown&#39;);
console.log(&#39;this will also print&#39;);</code></pre>
<h3>console.dir(obj[, options])<span><a class="mark" href="#console_console_dir_obj_options" id="console_console_dir_obj_options">#</a></span></h3>
<p>Uses <a href="util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> on <code>obj</code> and prints the resulting string to <code>stdout</code>.
This function bypasses any custom <code>inspect()</code> function defined on <code>obj</code>. An
optional <code>options</code> object may be passed to alter certain aspects of the
formatted string:

</p>
<ul>
<li><p><code>showHidden</code> - if <code>true</code> then the object&#39;s non-enumerable and symbol
properties will be shown too. Defaults to <code>false</code>.</p>
</li>
<li><p><code>depth</code> - tells <a href="util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> how many times to recurse while
formatting the object. This is useful for inspecting large complicated objects.
Defaults to <code>2</code>. To make it recurse indefinitely, pass <code>null</code>.</p>
</li>
<li><p><code>colors</code> - if <code>true</code>, then the output will be styled with ANSI color codes.
Defaults to <code>false</code>. Colors are customizable; see
<a href="util.html#util_customizing_util_inspect_colors">customizing <code>util.inspect()</code> colors</a>.</p>
</li>
</ul>
<h3>console.error([data][, ...])<span><a class="mark" href="#console_console_error_data" id="console_console_error_data">#</a></span></h3>
<p>Prints to <code>stderr</code> with newline. Multiple arguments can be passed, with the
first used as the primary message and all additional used as substitution
values similar to <code>printf(3)</code> (the arguments are all passed to
<a href="util.html#util_util_format_format"><code>util.format()</code></a>).

</p>
<pre><code class="js">const code = 5;
console.error(&#39;error #%d&#39;, code);
  // Prints: error #5, to stderr
console.error(&#39;error&#39;, code);
  // Prints: error 5, to stderr</code></pre>
<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then
<a href="util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> is called on each argument and the resulting string
values are concatenated. See <a href="util.html#util_util_format_format"><code>util.format()</code></a> for more information.

</p>
<h3>console.info([data][, ...])<span><a class="mark" href="#console_console_info_data" id="console_console_info_data">#</a></span></h3>
<p>The <code>console.info()</code> function is an alias for <a href="#console_console_log_data"><code>console.log()</code></a>.

</p>
<h3>console.log([data][, ...])<span><a class="mark" href="#console_console_log_data" id="console_console_log_data">#</a></span></h3>
<p>Prints to <code>stdout</code> with newline. Multiple arguments can be passed, with the
first used as the primary message and all additional used as substitution
values similar to <code>printf(3)</code> (the arguments are all passed to
<a href="util.html#util_util_format_format"><code>util.format()</code></a>).

</p>
<pre><code class="js">var count = 5;
console.log(&#39;count: %d&#39;, count);
  // Prints: count: 5, to stdout
console.log(&#39;count: &#39;, count);
  // Prints: count: 5, to stdout</code></pre>
<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then
<a href="util.html#util_util_inspect_object_options"><code>util.inspect()</code></a> is called on each argument and the resulting string
values are concatenated. See <a href="util.html#util_util_format_format"><code>util.format()</code></a> for more information.

</p>
<h3>console.time(label)<span><a class="mark" href="#console_console_time_label" id="console_console_time_label">#</a></span></h3>
<p>Used to calculate the duration of a specific operation. To start a timer, call
the <code>console.time()</code> method, giving it a unique <code>label</code> as the only parameter. To stop the
timer, and to get the elapsed time in milliseconds, just call the
<a href="#console_console_timeend_label"><code>console.timeEnd()</code></a> method, again passing the
timer&#39;s unique <code>label</code> as the parameter.

</p>
<h3>console.timeEnd(label)<span><a class="mark" href="#console_console_timeend_label" id="console_console_timeend_label">#</a></span></h3>
<p>Stops a timer that was previously started by calling <a href="#console_console_time_label"><code>console.time()</code></a> and
prints the result to stdout:

</p>
<pre><code class="js">console.time(&#39;100-elements&#39;);
for (var i = 0; i &lt; 100; i++) {
  ;
}
console.timeEnd(&#39;100-elements&#39;);
// prints 100-elements: 262ms</code></pre>
<h3>console.trace(message[, ...])<span><a class="mark" href="#console_console_trace_message" id="console_console_trace_message">#</a></span></h3>
<p>Prints to <code>stderr</code> the string <code>&#39;Trace :&#39;</code>, followed by the <a href="util.html#util_util_format_format"><code>util.format()</code></a>
formatted message and stack trace to the current position in the code.

</p>
<pre><code class="js">console.trace(&#39;Show me&#39;);
  // Prints: (stack trace will vary based on where trace is called)
  //  Trace: Show me
  //    at repl:2:9
  //    at REPLServer.defaultEval (repl.js:248:27)
  //    at bound (domain.js:287:14)
  //    at REPLServer.runBound [as eval] (domain.js:300:12)
  //    at REPLServer.&lt;anonymous&gt; (repl.js:412:12)
  //    at emitOne (events.js:82:20)
  //    at REPLServer.emit (events.js:169:7)
  //    at REPLServer.Interface._onLine (readline.js:210:10)
  //    at REPLServer.Interface._line (readline.js:549:8)
  //    at REPLServer.Interface._ttyWrite (readline.js:826:14)</code></pre>
<h3>console.warn([data][, ...])<span><a class="mark" href="#console_console_warn_data" id="console_console_warn_data">#</a></span></h3>
<p>The <code>console.warn()</code> function is an alias for <a href="#console_console_error_data"><code>console.error()</code></a>.

</p>

      </div>
    </div>
  </div>
  <script src="assets/sh_main.js"></script>
  <script src="assets/sh_javascript.min.js"></script>
  <script>highlight(undefined, undefined, 'pre');</script>
</body>
</html>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
  "source": "doc/api/string_decoder.markdown",
  "modules": [
    {
      "textRaw": "StringDecoder",
      "name": "stringdecoder",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>To use this module, do <code>require(&#39;string_decoder&#39;)</code>. StringDecoder decodes a\nbuffer to a string. It is a simple interface to <code>buffer.toString()</code> but provides\nadditional support for utf8.\n\n</p>\n<pre><code class=\"js\">const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\nconst cent = new Buffer([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = new Buffer([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));</code></pre>\n",
      "classes": [
        {
          "textRaw": "Class: StringDecoder",
          "type": "class",
          "name": "StringDecoder",
          "desc": "<p>Accepts a single argument, <code>encoding</code> which defaults to <code>&#39;utf8&#39;</code>.\n\n</p>\n",
          "methods": [
            {
              "textRaw": "decoder.end()",
              "type": "method",
              "name": "end",
              "desc": "<p>Returns any trailing bytes that were left in the buffer.\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "decoder.write(buffer)",
              "type": "method",
              "name": "write",
              "desc": "<p>Returns a decoded string.\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "StringDecoder"
    }
  ]
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           